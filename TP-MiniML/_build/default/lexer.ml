# 1 "lexer.mll"
 

  open Lexing
  open Parser

    let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "fun",   FUN;
        "let",   LET;
        "rec",   REC;
        "in",    IN;
        "if",    IF;
        "then",  THEN;
        "else",  ELSE;
        "true",  BOOL true;
        "false", BOOL false;
        "mod",   MOD;
        "not",   NOT;
        "type",  TYPE;
        "of",    OF;
        "int",   TINT;
        "bool",  TBOOL;
        "fst",   FST;
        "snd",   SND;
        "match", MATCH;
        "with",  WITH;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 36 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\228\255\229\255\231\255\232\255\233\255\001\000\001\000\
    \031\000\002\000\244\255\245\255\247\255\248\255\032\000\061\000\
    \160\000\136\000\004\000\002\000\255\255\253\255\249\255\237\255\
    \243\255\239\255\241\255\242\255\236\255\235\255\112\000\252\255\
    \253\255\017\000\055\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\025\000\026\000\
    \015\000\017\000\255\255\255\255\255\255\255\255\009\000\005\000\
    \004\000\003\000\021\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\020\000\019\000\000\000\019\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\019\000\000\000\000\000\000\000\007\000\028\000\
    \018\000\005\000\011\000\012\000\004\000\014\000\021\000\010\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\003\000\036\000\008\000\013\000\009\000\023\000\
    \024\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\027\000\025\000\026\000\022\000\016\000\
    \035\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\006\000\029\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \033\000\000\000\034\000\000\000\000\000\000\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\000\000\000\000\000\000\016\000\
    \001\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\255\255\000\000\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\255\255\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\033\000\000\000\000\000\000\000\009\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\008\000\008\000\014\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\006\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \030\000\255\255\030\000\255\255\255\255\255\255\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\255\255\255\255\255\255\255\255\016\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \030\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 185 "lexer.ml"

  | 1 ->
# 45 "lexer.mll"
      ( token lexbuf )
# 190 "lexer.ml"

  | 2 ->
# 47 "lexer.mll"
      ( comment lexbuf; token lexbuf )
# 195 "lexer.ml"

  | 3 ->
let
# 48 "lexer.mll"
              n
# 201 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 49 "lexer.mll"
      ( INT(int_of_string n) )
# 205 "lexer.ml"

  | 4 ->
let
# 50 "lexer.mll"
             id
# 211 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "lexer.mll"
      ( keyword_or_ident id )
# 215 "lexer.ml"

  | 5 ->
let
# 52 "lexer.mll"
            c
# 221 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "lexer.mll"
      ( CSTR c )
# 225 "lexer.ml"

  | 6 ->
# 55 "lexer.mll"
      ( ARROW )
# 230 "lexer.ml"

  | 7 ->
# 57 "lexer.mll"
      ( EQ )
# 235 "lexer.ml"

  | 8 ->
# 59 "lexer.mll"
      ( PLUS )
# 240 "lexer.ml"

  | 9 ->
# 61 "lexer.mll"
      ( MINUS )
# 245 "lexer.ml"

  | 10 ->
# 63 "lexer.mll"
      ( STAR )
# 250 "lexer.ml"

  | 11 ->
# 65 "lexer.mll"
      ( SLASH )
# 255 "lexer.ml"

  | 12 ->
# 67 "lexer.mll"
      ( LSR )
# 260 "lexer.ml"

  | 13 ->
# 69 "lexer.mll"
      ( LSL )
# 265 "lexer.ml"

  | 14 ->
# 71 "lexer.mll"
      ( NEQ )
# 270 "lexer.ml"

  | 15 ->
# 73 "lexer.mll"
      ( LT )
# 275 "lexer.ml"

  | 16 ->
# 75 "lexer.mll"
      ( LE )
# 280 "lexer.ml"

  | 17 ->
# 77 "lexer.mll"
      ( GT )
# 285 "lexer.ml"

  | 18 ->
# 79 "lexer.mll"
      ( GE )
# 290 "lexer.ml"

  | 19 ->
# 81 "lexer.mll"
      ( AND )
# 295 "lexer.ml"

  | 20 ->
# 83 "lexer.mll"
      ( OR )
# 300 "lexer.ml"

  | 21 ->
# 85 "lexer.mll"
      ( LPAR )
# 305 "lexer.ml"

  | 22 ->
# 87 "lexer.mll"
      ( RPAR )
# 310 "lexer.ml"

  | 23 ->
# 89 "lexer.mll"
      ( COMMA )
# 315 "lexer.ml"

  | 24 ->
# 91 "lexer.mll"
      ( COLON )
# 320 "lexer.ml"

  | 25 ->
# 93 "lexer.mll"
      ( BAR )
# 325 "lexer.ml"

  | 26 ->
# 95 "lexer.mll"
      ( failwith ("Unknown character : " ^ (lexeme lexbuf)) )
# 330 "lexer.ml"

  | 27 ->
# 97 "lexer.mll"
      ( EOF )
# 335 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 101 "lexer.mll"
      ( () )
# 347 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
      ( comment lexbuf; comment lexbuf )
# 352 "lexer.ml"

  | 2 ->
# 105 "lexer.mll"
      ( comment lexbuf )
# 357 "lexer.ml"

  | 3 ->
# 107 "lexer.mll"
      ( failwith "unfinished comment" )
# 362 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

